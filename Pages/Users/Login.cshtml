@page
@model LoginModel

@using System;
@using MaxPizzaProject.Infrastructure;
@using Microsoft.AspNetCore.Http;
@using Microsoft.Extensions.DependencyInjection;

<div class="bg-primary text-center text-white p2 mt-2"><h4>Log In</h4></div>

<div class="m-1 text-danger" asp-validation-summary="All"></div>


<form method="post">
    <input type="hidden" name="returnUrl" value="@Model.ReturnUrl" />

    <div class="form-group">
        <label>UserName</label>
        <input class="form-control" asp-for="UserName" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <input class="form-control" type="password" asp-for="Password" />
    </div>

    <button class="btn btn-primary" type="submit">Log In</button>

    <div class="mt-1">
        <span class="text-warning small">Don`t have an account ?</span>
        <div>
            <a asp-page="/Users/Register" class="btn btn-primary" type="submit">Register</a>
        </div>
    </div>



</form>









@functions{

    public class LoginModel : PageModel
    {
        private SignInManager<IdentityUser> signInManager;
        private IServiceProvider service;

        public LoginModel(SignInManager<IdentityUser> signinMgr, IServiceProvider serv)
        {
            signInManager = signinMgr;
            service = serv;

        }

        [BindProperty]
        [Required]
        public string UserName { get; set; }

        [BindProperty]
        [Required]
        public string Password { get; set; }

        [BindProperty(SupportsGet = true)]
        public string ReturnUrl { get; set; }


        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                Microsoft.AspNetCore.Identity.SignInResult result =
                    await signInManager.PasswordSignInAsync(UserName, Password, false, false);


                if (result.Succeeded)
                {
                    SetSession();
                    return Redirect(ReturnUrl ?? "/");
                }
                ModelState.AddModelError("", "Invalid username or password");
            }
            return Page();
        }


        public void SetSession()
        {
            ISession session =
                    service.GetRequiredService<IHttpContextAccessor>()?.HttpContext.Session;

            SessionCart cart = session?.GetJson<SessionCart>(UserName) ?? new SessionCart();
            cart.Session = session;
            CurrentSession.currentSession = UserName;

        }
    }


}
